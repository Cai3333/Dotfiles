local present, luasnip = pcall(require, "luasnip")
local chadrc_config = require("core.utils").load_config()

if not present then
   return
end

local s = luasnip.snippet
local sn = luasnip.snippet_node
local isn = luasnip.indent_snippet_node
local t = luasnip.text_node
local i = luasnip.insert_node
local f = luasnip.function_node
local c = luasnip.choice_node
local d = luasnip.dynamic_node
local events = require("luasnip.util.events")

luasnip.config.set_config {
   history = true,
   updateevents = "TextChanged,TextChangedI",
}

luasnip.snippets = {
	-- When trying to expand a snippet, luasnip first searches the tables for
	-- each filetype specified in 'filetype' followed by 'all'.
	-- If ie. the filetype is 'lua.c'
	--     - luasnip.lua
	--     - luasnip.c
	--     - luasnip.all
	-- are searched in that order.
	all = {
      s("trigger", {
         t({"", "After expanding, the cursor is here ->"}), i(1),
         t({"","After jumping forward once, cursor is here ->"}), i(2),
         t({"", "After jumping once more, the snippet is exited there ->"}), i(0),
      })

	},
	tex = {
		-- rec_ls is self-referencing. That makes this snippet 'infinite' eg. have as many
		-- \item as necessary by utilizing a choiceNode.
		s("smallskip", {
			t({"", "\\smallskip", ""}),
		}),
		s("medskip", {
			t({"", "\\medskip", ""}),
		}),
		s("bigskip", {
			t({"", "\\bigskip", ""}),
		}),
		s("m2x2", {
			t({"\\begin{pmatrix}", ""}),
         	i(1, "1"), t({" & "}), i(2, "0"), t({"\\\\", ""}),
         	i(3, "0"), t({" & "}), i(4, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
        s("m2x3", {
			t({"\\begin{pmatrix}", ""}),
         	i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({"\\\\", ""}),
         	i(4, "0"), t({" & "}), i(5, "1"), t({" & "}), i(6, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m3x2", {
			t({"\\begin{pmatrix}", ""}),
         	i(1, "1"), t({" & "}), i(2, "0"), t({"\\\\", ""}),
         	i(3, "0"), t({" & "}), i(4, "1"), t({"\\\\", ""}),
         	i(5, "0"), t({" & "}), i(6, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m3x3", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({"\\\\", ""}),
			i(4, "0"), t({" & "}), i(5, "1"), t({" & "}), i(6, "0"), t({"\\\\", ""}),
			i(7, "0"), t({" & "}), i(8, "0"), t({" & "}), i(9, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m3x4", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({"\\\\", ""}),
			i(5, "0"), t({" & "}), i(6, "1"), t({" & "}), i(7, "0"), t({" & "}), i(8, "0"), t({"\\\\", ""}),
			i(9, "0"), t({" & "}), i(10, "0"), t({" & "}), i(11, "1"), t({" & "}), i(12, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m4x3", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({"\\\\", ""}),
			i(4, "0"), t({" & "}), i(5, "1"), t({" & "}), i(6, "0"), t({"\\\\", ""}),
			i(7, "0"), t({" & "}), i(8, "0"), t({" & "}), i(9, "1"), t({"\\\\", ""}),
			i(10, "0"), t({" & "}), i(11, "0"), t({" & "}), i(12, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m4x4", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({"\\\\", ""}),
			i(5, "0"), t({" & "}), i(6, "1"), t({" & "}), i(7, "0"), t({" & "}), i(8, "0"), t({"\\\\", ""}),
			i(9, "0"), t({" & "}), i(10, "0"), t({" & "}), i(11, "1"), t({" & "}), i(12, "0"), t({"\\\\", ""}),
			i(13, "0"), t({" & "}), i(14, "0"), t({" & "}), i(15, "0"), t({" & "}), i(16, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m4x5", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({" & "}), i(5, "0"), t({"\\\\", ""}),
			i(6, "0"), t({" & "}), i(7, "1"), t({" & "}), i(8, "0"), t({" & "}), i(9, "0"), t({" & "}), i(10, "0"), t({"\\\\", ""}),
			i(11, "0"), t({" & "}), i(12, "0"), t({" & "}), i(13, "1"), t({" & "}), i(14, "0"), t({" & "}), i(15, "0"), t({"\\\\", ""}),
			i(16, "0"), t({" & "}), i(17, "0"), t({" & "}), i(18, "0"), t({" & "}), i(19, "1"), t({" & "}), i(20, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m5x4", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({"\\\\", ""}),
			i(5, "0"), t({" & "}), i(6, "1"), t({" & "}), i(7, "0"), t({" & "}), i(8, "0"), t({"\\\\", ""}),
			i(9, "0"), t({" & "}), i(10, "0"), t({" & "}), i(11, "1"), t({" & "}), i(12, "0"), t({"\\\\", ""}),
			i(13, "0"), t({" & "}), i(14, "0"), t({" & "}), i(15, "0"), t({" & "}), i(16, "1"), t({"\\\\", ""}),
			i(17, "0"), t({" & "}), i(18, "0"), t({" & "}), i(19, "0"), t({" & "}), i(20, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m5x5", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({" & "}), i(5, "0"), t({"\\\\", ""}),
			i(6, "0"), t({" & "}), i(7, "1"), t({" & "}), i(8, "0"), t({" & "}), i(9, "0"), t({" & "}), i(10, "0"), t({"\\\\", ""}),
			i(11, "0"), t({" & "}), i(12, "0"), t({" & "}), i(13, "1"), t({" & "}), i(14, "0"), t({" & "}), i(15, "0"), t({"\\\\", ""}),
			i(16, "0"), t({" & "}), i(17, "0"), t({" & "}), i(18, "0"), t({" & "}), i(19, "1"), t({" & "}), i(20, "0"), t({"\\\\", ""}),
			i(21, "0"), t({" & "}), i(22, "0"), t({" & "}), i(23, "0"), t({" & "}), i(24, "1"), t({" & "}), i(25, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m5x6", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({" & "}), i(5, "0"), t({" & "}), i(6, "0"), t({"\\\\", ""}),
			i(7, "0"), t({" & "}), i(8, "1"), t({" & "}), i(9, "0"), t({" & "}), i(10, "0"), t({" & "}), i(11, "0"), t({" & "}), i(12, "0"), t({"\\\\", ""}),
			i(13, "0"), t({" & "}), i(14, "0"), t({" & "}), i(15, "1"), t({" & "}), i(16, "0"), t({" & "}), i(17, "0"), t({" & "}), i(18, "0"), t({"\\\\", ""}),
			i(19, "0"), t({" & "}), i(20, "0"), t({" & "}), i(21, "0"), t({" & "}), i(22, "1"), t({" & "}), i(23, "0"), t({" & "}), i(24, "0"), t({"\\\\", ""}),
			i(25, "0"), t({" & "}), i(26, "0"), t({" & "}), i(27, "0"), t({" & "}), i(28, "1"), t({" & "}), i(29, "1"), t({" & "}), i(30, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("6x5", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({" & "}), i(5, "0"), t({"\\\\", ""}),
			i(6, "0"), t({" & "}), i(7, "1"), t({" & "}), i(8, "0"), t({" & "}), i(9, "0"), t({" & "}), i(10, "0"), t({"\\\\", ""}),
			i(11, "0"), t({" & "}), i(12, "0"), t({" & "}), i(13, "1"), t({" & "}), i(14, "0"), t({" & "}), i(15, "0"), t({"\\\\", ""}),
			i(16, "0"), t({" & "}), i(17, "0"), t({" & "}), i(18, "0"), t({" & "}), i(19, "1"), t({" & "}), i(20, "0"), t({"\\\\", ""}),
			i(21, "0"), t({" & "}), i(22, "0"), t({" & "}), i(23, "0"), t({" & "}), i(24, "1"), t({" & "}), i(25, "1"), t({"\\\\", ""}),
			i(26, "0"), t({" & "}), i(27, "0"), t({" & "}), i(28, "0"), t({" & "}), i(29, "1"), t({" & "}), i(30, "1"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
		s("m6x6", {
			t({"\\begin{pmatrix}", ""}),
			i(1, "1"), t({" & "}), i(2, "0"), t({" & "}), i(3, "0"), t({" & "}), i(4, "0"), t({" & "}), i(5, "0"), t({" & "}), i(6, "0"), t({"\\\\", ""}),
			i(7, "0"), t({" & "}), i(8, "1"), t({" & "}), i(9, "0"), t({" & "}), i(10, "0"), t({" & "}), i(11, "0"), t({" & "}), i(12, "0"), t({"\\\\", ""}),
			i(13, "0"), t({" & "}), i(14, "0"), t({" & "}), i(15, "1"), t({" & "}), i(16, "0"), t({" & "}), i(17, "0"), t({" & "}), i(18, "0"), t({"\\\\", ""}),
			i(19, "0"), t({" & "}), i(20, "0"), t({" & "}), i(21, "0"), t({" & "}), i(22, "1"), t({" & "}), i(23, "0"), t({" & "}), i(24, "0"), t({"\\\\", ""}),
			i(25, "0"), t({" & "}), i(26, "0"), t({" & "}), i(27, "0"), t({" & "}), i(28, "1"), t({" & "}), i(29, "1"), t({" & "}), i(30, "0"), t({"\\\\", ""}),
			i(31, "0"), t({" & "}), i(32, "0"), t({" & "}), i(33, "0"), t({" & "}), i(34, "1"), t({" & "}), i(35, "1"), t({" & "}), i(36, "0"), t({""}),
			t({"", "\\end{pmatrix}"}),
		}),
	},
}

require("luasnip/loaders/from_vscode").load { path = { chadrc_config.plugins.options.luasnip.snippet_path } }